use algorithm::binary_add::binary_add;

#[test]
fn test_binary_add() {
    assert_eq!(binary_add(vec![0], vec![0]), vec![0]);
    assert_eq!(binary_add(vec![1], vec![0]), vec![1]);
    assert_eq!(binary_add(vec![0], vec![1]), vec![1]);
    assert_eq!(binary_add(vec![1], vec![1]), vec![1, 0]);
    assert_eq!(binary_add(vec![1, 0], vec![1]), vec![1, 1]);
    assert_eq!(binary_add(vec![1, 1], vec![1]), vec![1, 0, 0]);
    assert_eq!(binary_add(vec![0, 1], vec![0]), vec![0, 1]);
    assert_eq!(binary_add(vec![0, 1], vec![0, 1]), vec![1, 0]);
    assert_eq!(binary_add(vec![1, 0], vec![0, 1]), vec![1, 1]);
    assert_eq!(
        binary_add(vec![1, 0, 1, 0], vec![1, 0, 0, 1]),
        vec![1, 0, 0, 1, 1]
    );
    assert_eq!(
        binary_add(vec![1, 0, 1, 0], vec![1, 0, 1, 0]),
        vec![1, 0, 1, 0, 0]
    );
    assert_eq!(
        binary_add(vec![1, 0, 1, 0], vec![1, 0, 1, 1]),
        vec![1, 0, 1, 0, 1]
    );
    assert_eq!(
        binary_add(
            vec![
                1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,
                0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1,
                1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1
            ],
            vec![
                1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1,
                1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0,
                0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0,
                0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1
            ]
        ),
        vec![
            1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1,
            0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,
            1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,
            0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
        ]
    );
}
